thinking steps:

main project
- Make one square div, always in the middle, that contains all the other divs.
html:make a div
css:make a class called .frame:
        makes the height of this div 100%
        makes the length the same amount
        2 px border, dotted purple, background yellow


- place 10 spans in the DIV, create a flexbox that will always make these boxes squares, and will fill the box, not dependent on the amount
html: place 10 spans inside the frame div
    give them the class .pixel
css:make a class called pixel:
        for now, give box-sizing: border box (to prevent them from taking too much space)
        give them 1 px border black
        give background color grey 
css:add to .frame
        flex: 1
        do flex-wrap: wrap, to make them fill the next line
* see if you can fill the frame evenly with 5x5

- make the frame and the contents shrink together with the screen, when you make it smaller
    
- add one "pixel" through JS

- Create a loop that fills the flexbox with the amount pixelAmount
html:remove the spans
js: LET pixelAmount be 9    
    LET frame = the frame (queryselect)
    LOOP (createPixel): 
        loop runs "pixelAmount" times
        CREATE and APPEND 9 spans to the frame
        ADD to these spans .pixel class
css:make min-width pixels, calc(95vh/sqrt(pixelAmount));

- make the box be filled with the input x input
js: LET input = 10
    LET pixelAmount = input * input

- disable the whole loop, and go back to one div. add a hover effect to that div, so the opacity then moves to 100%
css:add to pixel opacity 0%
js: comment out the loop
    CREATE and APPEND a single span
    ADD an EVENT LISTENER that listens to hover
    make a FUNCTION increaseOpacity
        increase style character opacity to 100%

- apply the hover opacity effect to the grid
js: add to the createPixel loop:
        the same eventlistener from the Researchblock


- create a textbox which does not accept any values higher than 100
html: create a div in the left upper corner
        give the div class .interface
        add a textbox to it
        add a button to it
css:place the textbox 1 level above (y-level) the frame
    give the .interface class 1 px border
    10 px padding
    flexbox: 1
    justify-content: space between

- make a button that will generate the pixel
    add an EVENT LISTENER to the button. If it is pressed, run function "createPixel"
    make a FUNCTION called "createPixel"

- let the pixelamount be made by the textinput and the button        
js: add to createPixel:
        IF textBox.value > 100
            textbox.value = 100
        LET pixelAmount = textBox.value * textBox.value

- make the pixel appear when a button is pressed
html: add a button to the .interface div,  with the text "generate"
    change the text inside the input to: amount of squares per side, max 100
js:     place the LOOP inside createPixel



colorful pixel:
Rather than squares being the same color throughout the grid, randomize the squaresâ€™ RGB values with each interaction.
- go back to a single span.
- add to the EVENT LISTENER, that when the hover event occurs, it makes the background color of the span choose a random value
- add this listener to the grid by adding it to the loop

random disappearance:
make it so that the color that you draw, disappears at random intervals. make sure that they last at a mimimum 200 milliseconds, and at a maximum 5 seconds. (5000 milliseconds)
- make one span again
- see if you can make it disappear 1 second after being colored
- apply this to the grid
- go back to the single span, and make it disappear at a  random moment between 200 and 5000 milliseconds
- apply this to the grid
- see if you can make this 


add the possibility for black and white drawing

add a button with an event listener.

add a style for the frame and the pixels, if you do black and white drawing

see if you can separate the grid creation, the coloring, and the fading,
separate the functions.




